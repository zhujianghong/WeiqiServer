syntax = "proto2";
package protobuf;

message MsgEnum
{
	enum MsgType {
		//客户端向服务器请求包
		PlayerRegisterRequestTag = 1; 
		PlayerRegisterResponseTag = 2;
		LoginRequestTag = 3;
		LoginResponseTag = 4;
		ChatRequestTag = 5;
		ChatResponseTag = 6; 
		MatchGameRequestTag = 7;
		MatchGameResponseTag = 8;
		InviteFriendRequestTag = 9;
		InviteFriendResponseTag = 10;
		ReceiverFriendRequestTag = 11;
		ReceiverFriendResponseTag = 12;
		InvitePlayGameRequestTag = 13;
		InvitePlayGameResponseTag = 14;
		ReceiverPlayGameRequestTag = 15;
		ReceiverPlayGameResponseTag = 16;
		FriendListRequestTag = 17;
		FriendListResponseTag = 18;
		DeleteFriendRequestTag = 19;
		DeleteFriendResponseTag = 20;
		
		ChessRuleSetReqTag = 21;
		ChessRuleSetResTag = 22;
		PutChessReqTag = 23;
		PutChessResTag = 24;
		
		//服务器转发给客户端的包
		ChatMessageInfoTag = 101;
		PlayerInfoTag = 102;
		InviteFriendInfoTag = 103;
		ReceiverFriendInfoTag = 104;
		InvitePlayGameInfoTag = 105;
		ReceiverPlayGameInfoTag = 106;
		MatchGameInfoTag = 107;
		DeleteFriendInfoTag = 108;
		
		RandomPlayerTypeTag = 201;
		NowCanPutTypeTag = 202;
		FinalStatisticsTag = 203;
	}; 
}
enum ErrCodeType{
		Success = 0;
		RepeatedLoginError = 1;
		AccountExistError = 2;
		AccountNotExistError = 3;
		AccountOrPasswdNotMatchError = 4;
		MysqlError = 5;
		PlayerOfflineError = 6;
		RoomNotExistError = 7;
		ProtoPacketFormatError = 8;
		PlayerPlayingGameError = 9;
		InviterFriendListLimitError = 10;
		InviteeFriendListLimitError = 11;
		PlayerLeaveRoomError = 12;
};
//client登录消息
message LoginRequest { 
	required string account = 1;//账号信息
	required string passwd = 2;//账号密码
	required int32 kind = 3;//用户登录的类型
}

//client登录消息回复
message LoginResponse {
	required ErrCodeType success = 1; //登录是否成功 返回错误的类型 1 成功 2 密码错误
	required PlayerInfo info = 2;//登录成功后服务器返回用户的基本信息
}
//client 注册的消息
message PlayerRegisterRequest{
	required string account = 1;
	required string name = 2;
	required string passwd = 3;
	required int32 icon = 4;
	required int32 sex = 5;
	required string autograph = 6; 
}

message PlayerRegisterResponse{
	required ErrCodeType success = 1;
	required int32 userid = 2;
}

message ChatRequest{
	required ChatMessageInfo info = 1;
}

message ChatResponse{
	required ErrCodeType success = 1;
	required int32 timestamp  = 2;
}

message MatchGameRequest{
	required int32 userid = 1;
}

message MatchGameResponse{
	required ErrCodeType success = 1;
}

message InviteFriendRequest{
	required int32 userid = 1;
	required InviteFriendInfo info = 2;
}

message InviteFriendResponse{
	required ErrCodeType success = 1;
}

message ReceiverFriendRequest{
	required int32 userid = 1;
	required ReceiverFriendInfo info = 2;
}

message ReceiverFriendResponse{
	required ErrCodeType success = 1;
}

message InvitePlayGameRequest{
	required int32 userid = 1;
	required InvitePlayGameInfo info = 2;
}

message InvitePlayGameResponse{
	required ErrCodeType success = 1;
}

message ReceiverPlayGameRequest{
	required int32 userid = 1;
	required ReceiverPlayGameInfo info = 2;
}

message ReceiverPlayGameResponse{
	required ErrCodeType success = 1;
}

message FriendListRequest{
	required int32 userid = 1;
}

message FriendListRespose{
	required ErrCodeType success = 1;
	repeated PlayerInfo list = 2;
}

message DeleteFriendRequest{
	required int32 userid = 1;
	required DeleteFriendInfo info = 2; 
}

message DeleteFriendResponse{
	required ErrCodeType success = 1;
}

//玩家聊天包
message ChatMessageInfo{
	required int32 sendUserid = 1;
	required string sendName = 2;
	optional uint64 roomId = 3[default = 0]; //如果消息是聊天室的包 roomId != 0
	optional int32 recvUserid = 4[default = 0]; //如果消息是私聊包 recvUserid ！= 0
	optional string recvName = 5; //如果消息是私聊包 name ！= 0 
	required string messageid = 6; //消息客户端自动生成的消息id 主要区别是否发送成功
	required string message = 7; //消息内容
	required int32 timestamp = 8; //服务器给的时间戳
}

//玩家基本信息包
message PlayerInfo{
	required int32 userid = 1;
	required string name = 2; 
	required int32 icon = 3;
	required int32 sex = 4;
	required string autograph = 5; 
	required int32 grade = 6;
	required int32 gnum = 7;
	required int32 gsnum = 8;
	required int32 gfnum = 9;
	required int32 gdnum = 10;
	required int32 fgsnum = 11;
	required int32 fgfnum = 12;
	required int32 fgdnum =13;
	required int32 money = 14;
	required int32 status = 15;
}

//好友邀请信息
message InviteFriendInfo{
	required int32 inviterUserid = 1;
	required string inviterName = 2;
	required int32 receiverUserid = 3;
	required string receiverName = 4;
}

//好友是否同意的信息
message ReceiverFriendInfo{
	required int32 inviterUserid = 1;
	required string inviterName = 2;
	required int32 receiverUserid = 3;
	required string receiverName = 4;
	required bool isAgree = 5;
}

//邀请对战信息
message InvitePlayGameInfo{
	required int32 inviterUserid = 1;
	required string inviterName = 2;
	required int32 receiverUserid = 3;
	required string receiverName = 4;
	required uint64 roomId = 5;
}

//是否接受对战信息
message ReceiverPlayGameInfo{
	required int32 inviterUserid = 1;
	required string inviterName = 2;
	required int32 receiverUserid = 3;
	required string receiverName = 4;
	required uint64 roomId = 5;
	required int32 blackUserid = 6;
	required int32 whiteUserid = 7;
	required bool isAgree = 8;
}

message MatchGameInfo{
	required ErrCodeType success = 1;
	required uint64 roomId = 2;
	required int32 	blackUserid = 3;
	required int32 	whiteUserid = 4;
	required PlayerInfo otherInfo = 5;
}

message DeleteFriendInfo{
	required int32 selfUserid= 1;
	required int32 selfName = 2;
	required int32 friendUserid = 3;
}


//对战逻辑包
message ChessPoint {
	required int32 x = 1;
	required int32 y = 2;
	required int32 z = 3;
}

message ChessStack {
	repeated ChessPoint points = 1;
}

message ListChessStacks {
	repeated ChessStack stacks = 1;
}

message NowChessNums {
	required int32 bnum = 1; //黑棋子数
	required int32 wnum = 2; 
}

message NowChessCount {
	required int32 bcount = 1; //黑棋目数
	required int32 wcount = 2; 
}

//结算
message FinalStatistics {
	required NowChessNums nums = 1;  
	required NowChessCount counts = 2;
	required int32 getscore = 3;
}

message PutChessReq{
	required ChessPoint chess = 1;
}

message PutChessRes{
	required int32 canput = 1; //1,可下 0,不可下 
	optional ChessPoint chess = 2;
	optional ChessStack clearstacks = 3;
}

//游戏开局随机的玩家棋子类型
message RandomPlayerType{
	required int32 type = 1; //1,黑棋 0,白棋 
}

//当前可下棋玩家类型
message NowCanPutType{
	required int32 type = 1; //1,黑棋 0,白棋 
}

//棋盘大小等设置
message ChessBoardRule{
	required int32 size = 1;
	//其余设置待定
}

message ChessRuleSetReq{
	required int32 inviterUserid = 1;
	required ChessBoardRule sets = 2;
}

//当前可下棋玩家类型
message ChessRuleSetRes{
	required int32 pass = 1; //0未通過并修改 1通过 2未通过并取消
	optional ChessBoardRule sets = 2;
	optional RandomPlayerType type = 3;
}
